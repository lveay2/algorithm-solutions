package lintcode.bfs;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Queue;

public class _258_Map_Jump {

  public static int mapJump(int[][] arr) {
    int[] dx = {0, 0, 1, -1};
    int[] dy = {1, -1, 0, 0};
    int n = arr.length;
    int m = arr[0].length;

    int[][] result = new int[n][m];

    for (int[] row : result) {
      Arrays.fill(row, Integer.MAX_VALUE);
    }

    Queue<Point> queue = new PriorityQueue<>(Comparator.comparingInt(a -> a.target));
    queue.offer(new Point(0, 0, 0));

    while (!queue.isEmpty()) {
      Point cp = queue.poll();
      result[cp.x][cp.y] = cp.target;

      if (cp.x == n - 1 && cp.y == m - 1) {
        return cp.target;
      }
      //            System.out.println("cp [" + cp.x + ", " + cp.y + "]: " + arr[cp.x][cp.y]);

      for (int i = 0; i < 4; i++) {
        int x = cp.x + dx[i];
        int y = cp.y + dy[i];

        if (0 <= x && x < n && 0 <= y && y < m) {
          //                    System.out.println("[" + x + ", " + y + "]: " + arr[x][y]);

          int currentTarget = Math.max(cp.target, Math.abs(arr[x][y] - arr[cp.x][cp.y]));

          if (currentTarget >= result[x][y]) {
            continue;
          }
          queue.offer(new Point(x, y, currentTarget));
        }
      }
    }

    return -1;
  }

  public static void main(String[] args) {
    System.out.println(mapJump(new int[][] {{1, 5}, {6, 2}}));
    System.out.println(
        mapJump(
            new int[][] {
              {0, 26, 79, 85, 85, 22, 20, 24, 37, 87},
              {76, 89, 79, 22, 14, 55, 58, 89, 6, 77},
              {29, 38, 98, 24, 14, 26, 48, 96, 32, 16},
              {76, 84, 75, 20, 7, 94, 48, 67, 40, 22},
              {59, 4, 49, 53, 61, 40, 66, 33, 61, 6},
              {10, 55, 25, 96, 10, 10, 17, 34, 90, 70},
              {84, 53, 61, 67, 53, 50, 56, 46, 48, 56},
              {62, 25, 9, 74, 26, 27, 37, 97, 53, 94},
              {12, 54, 95, 29, 14, 27, 60, 56, 92, 32},
              {47, 86, 82, 32, 49, 57, 50, 63, 11, 20}
            }));
    System.out.println(
        mapJump(
            new int[][] {
              {
                61, 15, 12, 150, 121, 145, 179, 80, 166, 67, 66, 180, 119, 110, 94, 71, 81, 91, 126,
                9
              },
              {
                185, 35, 110, 132, 23, 175, 99, 155, 137, 113, 53, 173, 11, 107, 76, 2, 198, 190,
                92, 141
              },
              {
                198, 190, 43, 154, 89, 108, 109, 171, 181, 68, 77, 62, 57, 65, 143, 17, 158, 69, 83,
                136
              },
              {
                159, 45, 197, 54, 95, 124, 11, 130, 186, 150, 127, 4, 175, 24, 54, 121, 164, 183,
                48, 131
              },
              {
                91, 46, 184, 140, 139, 196, 14, 124, 186, 62, 155, 81, 10, 176, 13, 15, 105, 49,
                188, 129
              },
              {
                62, 80, 76, 190, 160, 2, 28, 15, 193, 182, 62, 95, 171, 194, 32, 148, 146, 94, 155,
                14
              },
              {
                58, 18, 178, 158, 154, 76, 44, 89, 10, 4, 174, 181, 0, 52, 83, 26, 129, 186, 133,
                132
              },
              {119, 0, 121, 49, 30, 46, 109, 182, 11, 38, 53, 183, 7, 33, 151, 54, 48, 168, 20, 12},
              {
                56, 173, 40, 94, 3, 186, 43, 81, 171, 42, 137, 89, 78, 151, 111, 79, 155, 36, 71,
                161
              },
              {
                168, 156, 182, 70, 176, 171, 147, 18, 43, 188, 123, 127, 102, 170, 131, 69, 132, 18,
                174, 163
              },
              {
                149, 96, 112, 62, 71, 162, 145, 153, 42, 131, 46, 62, 144, 192, 100, 20, 53, 192,
                38, 186
              },
              {
                51, 119, 154, 154, 185, 12, 23, 26, 45, 132, 178, 55, 175, 110, 33, 82, 24, 9, 15, 8
              },
              {
                68, 26, 129, 188, 28, 139, 88, 120, 102, 24, 136, 85, 48, 131, 137, 151, 19, 147,
                100, 44
              },
              {
                29, 32, 144, 13, 138, 11, 13, 142, 28, 84, 72, 91, 152, 123, 121, 28, 34, 139, 146,
                163
              },
              {
                36, 27, 153, 67, 171, 7, 79, 51, 163, 55, 146, 195, 164, 199, 15, 103, 101, 191,
                164, 185
              },
              {
                96, 195, 118, 156, 126, 181, 94, 134, 76, 81, 25, 117, 110, 26, 72, 109, 83, 11,
                109, 97
              },
              {
                89, 81, 48, 41, 91, 31, 89, 26, 112, 42, 174, 20, 110, 166, 71, 160, 134, 96, 184, 9
              },
              {
                26, 141, 31, 125, 124, 11, 47, 11, 177, 127, 108, 199, 46, 103, 31, 131, 49, 9, 12,
                97
              },
              {60, 51, 163, 39, 173, 69, 76, 41, 65, 164, 71, 85, 18, 8, 90, 99, 23, 72, 132, 28},
              {
                172, 116, 178, 13, 193, 99, 191, 76, 103, 198, 154, 34, 143, 12, 154, 161, 189, 24,
                93, 175
              }
            }));
  }

  static class Point {
    int x;
    int y;
    int target;

    Point(int x, int y, int target) {
      this.x = x;
      this.y = y;
      this.target = target;
    }
  }
}
