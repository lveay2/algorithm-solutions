package leetcode._5201_5300;

import java.util.HashMap;
import java.util.Map;

public class _5243_Tuple_with_Same_Product {

  public static void main(String[] args) {
    _5243_Tuple_with_Same_Product solution = new _5243_Tuple_with_Same_Product();
    System.out.println(solution.tupleSameProduct(new int[] {2, 3, 4, 6}));
    System.out.println(solution.tupleSameProduct(new int[] {1, 2, 4, 5, 10}));
    System.out.println(solution.tupleSameProduct(new int[] {2, 3, 4, 6, 8, 12}));
    System.out.println(solution.tupleSameProduct(new int[] {2, 3, 5, 7}));
    long start = System.currentTimeMillis();
    System.out.println(
        solution.tupleSameProduct(
                new int[] {
                  549, 758, 620, 258, 688, 676, 415, 5, 12, 744, 440, 808, 889, 355, 233, 810, 312,
                  822, 910, 210, 570, 203, 593, 874, 412, 518, 22, 251, 708, 497, 725, 180, 826,
                  653, 629, 257, 330, 90, 719, 80, 849, 924, 313, 600, 107, 877, 164, 33, 132, 2,
                  124, 729, 57, 394, 890, 891, 772, 205, 908, 236, 987, 273, 811, 428, 449, 206, 37,
                  373, 158, 853, 955, 171, 564, 393, 932, 701, 292, 363, 89, 427, 76, 569, 144, 484,
                  869, 325, 978, 204, 940, 411, 234, 94, 907, 288, 408, 977, 473, 604, 835, 581
                })
            + ", time: "
            + (System.currentTimeMillis() - start));
    start = System.currentTimeMillis();
    System.out.println(
        solution.tupleSameProduct(
                new int[] {
                  69, 252, 95, 725, 112, 345, 390, 221, 405, 27, 58, 100, 392, 156, 147, 377, 32,
                  288, 350, 17, 230, 609, 29, 357, 66, 728, 140, 462, 190, 621, 51, 7, 475, 105,
                  255, 81, 391, 120, 690, 250, 308, 261, 68, 464, 28, 540, 116, 18, 192, 16, 468,
                  189, 532, 60, 56, 420, 207, 425, 630, 126, 40, 432, 2, 153, 84, 272, 870, 210,
                  552, 200, 228, 161, 285, 648, 322, 320, 132, 87, 459, 70, 336, 64, 184, 44, 338,
                  15, 196, 90, 117, 20, 14, 45, 266, 270, 374, 204, 133, 416, 165, 99, 780, 102,
                  551, 195, 34, 506, 182, 160, 513, 48, 114, 175, 72, 560, 494, 364, 22, 299, 225,
                  180, 460, 171, 104, 580, 476, 598, 4, 437, 150, 152, 76, 340, 650, 50, 145, 672,
                  522, 378, 75, 396, 12, 325, 375, 406, 21, 1, 170, 702, 10, 306, 348, 304, 224,
                  575, 418, 342, 696, 368, 24, 500, 483, 231, 203, 78, 399, 253, 26, 644, 174, 19,
                  54, 9, 486, 128, 567, 57, 720, 450, 8, 297, 162, 52, 96, 125, 588, 35, 456, 240,
                  30, 440, 260, 130, 594, 525, 91, 840, 154, 25, 330, 264
                })
            + ", time: "
            + (System.currentTimeMillis() - start));
    start = System.currentTimeMillis();
    System.out.println(
        solution.tupleSameProduct(
                new int[] {
                  336, 1771, 851, 1091, 3860, 89, 361, 2382, 2000, 194, 60, 2093, 3844, 59, 967,
                  240, 570, 2642, 281, 2662, 3795, 2195, 2795, 1473, 2403, 1833, 3398, 3554, 141,
                  781, 1359, 2498, 3918, 1783, 3514, 3193, 3732, 594, 952, 2883, 2162, 1738, 3174,
                  1412, 1016, 335, 2277, 3764, 161, 1136, 1553, 1628, 528, 145, 3562, 786, 3549,
                  2622, 870, 380, 3827, 2580, 879, 1308, 2587, 2309, 1607, 3858, 3916, 2270, 2064,
                  1045, 1487, 1848, 638, 3721, 777, 2594, 1770, 2746, 3191, 2755, 2649, 2969, 1497,
                  1753, 474, 2179, 1933, 984, 1587, 2407, 2931, 3451, 3259, 1083, 1402, 1556, 288,
                  2043, 1943, 1429, 2397, 322, 3896, 3234, 2132, 146, 2691, 2687, 2955, 1675, 2588,
                  1912, 310, 2624, 785, 2501, 912, 616, 3876, 2011, 1522, 1294, 1346, 3567, 1847,
                  2196, 1357, 482, 2128, 855, 3108, 2734, 3085, 3692, 3443, 3035, 3389, 3376, 1057,
                  1011, 353, 418, 3775, 1196, 1525, 2189, 3340, 3907, 3609, 614, 1460, 468, 3044,
                  1526, 712, 916, 1085, 3252, 2329, 1199, 377, 2327, 1961, 3129, 3586, 675, 2207,
                  3183, 3449, 1966, 2557, 555, 3421, 2967, 1882, 2298, 3622, 3683, 1463, 3283, 585,
                  400, 1757, 2429, 3073, 1619, 3310, 478, 1023, 709, 2024, 2493, 3264, 3439, 2838,
                  1604, 3263, 1022, 1439, 3619, 2489, 84, 452, 1984, 2436, 1622, 2170, 3367, 1950,
                  621, 3929, 3256, 3455, 3664, 2293, 574, 3636, 850, 1445, 112, 1019, 2896, 3513,
                  2231, 1328, 1571, 3349, 1374, 2986, 2970, 1782, 732, 3980, 3529, 1502, 2881, 2950,
                  435, 2848, 2048, 439, 3046, 3565, 1006, 1241, 447, 3232, 94, 2695, 2366, 1236,
                  3185, 173, 1281, 3371, 157, 3227, 3144, 1488, 2888, 1361, 3248, 3125, 462, 1546,
                  3885, 1233, 987, 3082, 3230, 169, 230, 2866, 2661, 1515, 3671, 1072, 394, 3221,
                  541, 3213, 1573, 1060, 2906, 3940, 317, 803, 2378, 3104, 1043, 868, 1115, 2152,
                  665, 1741, 2497, 3685, 339, 1363, 2626, 2181, 2937, 600, 1536, 2514, 3276, 1867,
                  1101, 1325, 1951, 3362, 1561, 688, 1828, 942, 2120, 1276, 214, 1727, 642, 1324,
                  2425, 1705, 1096, 76, 774, 694, 2680, 1190, 1177, 2441, 746, 1520, 1709, 1348,
                  2591, 108, 2818, 2699, 1413, 2459, 1442, 540, 1065, 826, 111, 3099, 1838, 3838,
                  2670, 2640, 1279, 2105, 2021, 3488, 1852, 1514, 323, 1397, 3016, 2644, 1028, 2976,
                  3668, 2445, 2664, 828, 3425, 1484, 3761, 640, 1653, 962, 2432, 1296, 2971, 433,
                  3141, 2890, 672, 3124, 1861, 1589, 1419, 706, 3131, 2136, 3033, 90, 3978, 308,
                  1696, 2160, 338, 954, 2529, 1844, 738
                })
            + ", time: "
            + (System.currentTimeMillis() - start));
  }

  public int tupleSameProduct(int[] nums) {
    Map<Integer, Integer> map = new HashMap<>();

    int l = nums.length;
    for (int i = 0; i < l; i++) {
      for (int j = i + 1; j < l; j++) {
        int product = nums[i] * nums[j];
        map.put(product, map.getOrDefault(product, 0) + 1);
      }
    }

    int result = 0;
    for (Map.Entry<Integer, Integer> e : map.entrySet()) {
      if (e.getValue() == 1) {
        continue;
      }

      int n = e.getValue();
      // C n 2 = n! / (2! * (n - 2)!) = n (n - 1) / 2
      result += (n * (n - 1) / 2) * 8;
    }

    return result;
  }
}
